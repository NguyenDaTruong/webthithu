import React, { useState, useEffect } from 'react';
import DarkVeil from '../components/DarkVeil';
import SplitText from '../components/SplitText';
import TextType from '../components/TextType';
import ExamGenerator from './ExamGenerator';
import '../styles/PracticeExam.css';

const PracticeExam = () => {
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [timeLeft, setTimeLeft] = useState(0);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [loading, setLoading] = useState(false);
  const [showExplanation, setShowExplanation] = useState({});
  const [showHomePopup, setShowHomePopup] = useState(false);
  const [examConfig, setExamConfig] = useState(null);
  const [showExamGenerator, setShowExamGenerator] = useState(true);

  // X·ª≠ l√Ω khi ƒë·ªÅ thi ƒë∆∞·ª£c t·∫°o
  const handleExamCreated = (exam) => {
    setQuestions(exam.questions || []);
    setTimeLeft(exam.timeLimit || 600); // 10 ph√∫t m·∫∑c ƒë·ªãnh
    setCurrentQuestion(0);
    setAnswers({});
    setIsSubmitted(false);
    setShowResult(false);
    setScore(0);
    setShowExplanation({});
    setExamConfig(exam);
    setShowExamGenerator(false);
  };

  // Reset ƒë·ªÉ t·∫°o ƒë·ªÅ thi m·ªõi
  const handleCreateNewExam = () => {
    setShowExamGenerator(true);
    setQuestions([]);
    setExamConfig(null);
    setTimeLeft(0);
    setCurrentQuestion(0);
    setAnswers({});
    setIsSubmitted(false);
    setShowResult(false);
    setScore(0);
    setShowExplanation({});
  };

  // Timer countdown
  useEffect(() => {
    if (timeLeft > 0 && !isSubmitted && questions && questions.length > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && !isSubmitted && questions && questions.length > 0) {
      handleSubmit();
    }
  }, [timeLeft, isSubmitted, questions]);

  // Debug state changes
  useEffect(() => {
    console.log('Answers state changed:', answers);
    console.log('ShowExplanation state changed:', showExplanation);
  }, [answers, showExplanation]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const handleAnswerSelect = (questionId, answer) => {
    console.log('handleAnswerSelect called:', { questionId, answer, currentAnswers: answers });
    
    // N·∫øu ƒë√£ ch·ªçn ƒë√°p √°n n√†y r·ªìi, b·ªè ch·ªçn (toggle)
    if (answers[questionId] === answer) {
      console.log('B·ªè ch·ªçn ƒë√°p √°n:', answer, 'cho c√¢u h·ªèi:', questionId);
      setAnswers(prev => {
        const newAnswers = { ...prev };
        delete newAnswers[questionId];
        return newAnswers;
      });
      
      // ·∫®n gi·∫£i th√≠ch khi b·ªè ch·ªçn
      setShowExplanation(prev => ({
        ...prev,
        [questionId]: false
      }));
      return;
    }
    
    console.log('Ch·ªçn ƒë√°p √°n m·ªõi:', answer, 'cho c√¢u h·ªèi:', questionId);
    // N·∫øu ch·ªçn ƒë√°p √°n m·ªõi, ch·ªâ gi·ªØ l·∫°i ƒë√°p √°n m·ªõi (nh∆∞ radio button)
    setAnswers(prev => ({
      ...prev,
      [questionId]: answer
    }));
    
    // Ki·ªÉm tra ngay l·∫≠p t·ª©c xem ƒë√°p √°n c√≥ ƒë√∫ng kh√¥ng
    const currentQ = questions && questions.length > 0 ? questions.find(q => q.Id === questionId) : null;
    if (currentQ && answer !== currentQ.CorrectAnswer) {
      // N·∫øu sai, hi·ªÉn th·ªã gi·∫£i th√≠ch ngay l·∫≠p t·ª©c
      setShowExplanation(prev => ({
        ...prev,
        [questionId]: true
      }));
    } else {
      // N·∫øu ƒë√∫ng, ·∫©n gi·∫£i th√≠ch
      setShowExplanation(prev => ({
        ...prev,
        [questionId]: false
      }));
    }
  };

  const handleHeaderClick = () => {
    console.log('Header clicked!');
    setShowHomePopup(true);
  };

  const handleConfirmHome = () => {
    setShowHomePopup(false);
    window.location.href = '/';
  };

  const handleCancelHome = () => {
    setShowHomePopup(false);
  };

  const handleSubmit = () => {
    setIsSubmitted(true);
    
    // Calculate score v√† ki·ªÉm tra c√¢u ƒëi·ªÉm li·ªát
    let correctCount = 0;
    let criticalQuestionFailed = false;
    let criticalQuestions = [];
    
    if (questions && questions.length > 0) {
      questions.forEach(q => {
        if (answers[q.Id] === q.CorrectAnswer) {
          correctCount++;
        } else if (q.IsCritical) {
          // N·∫øu c√¢u ƒëi·ªÉm li·ªát b·ªã sai
          criticalQuestionFailed = true;
          criticalQuestions.push(q);
        }
      });
    }
    
    const finalScore = Math.round((correctCount / (questions ? questions.length : 1)) * 100);
    setScore(finalScore);
    
    // Ki·ªÉm tra c√¢u ƒëi·ªÉm li·ªát tr∆∞·ªõc khi x√©t ƒëi·ªÉm
    if (criticalQuestionFailed) {
      // N·∫øu c√≥ c√¢u ƒëi·ªÉm li·ªát sai, thi tr∆∞·ª£t ngay l·∫≠p t·ª©c
      setScore(0);
    }
    
    setShowResult(true);
  };

  const getQuestionStatus = (index) => {
    if (!questions || !questions[index]) return 'unanswered';
    
    const question = questions[index];
    if (answers[question.Id]) {
      return answers[question.Id] === question.CorrectAnswer ? 'correct' : 'incorrect';
    }
    return 'unanswered';
  };

  const getExplanation = (question) => {
    if (!question) return 'Kh√¥ng c√≥ gi·∫£i th√≠ch cho c√¢u h·ªèi n√†y.';
    // T·∫°o gi·∫£i th√≠ch d·ª±a tr√™n ƒë√°p √°n ƒë√∫ng
    const optionText = question[`Option${question.CorrectAnswer}`];
    return `ƒê√°p √°n ƒë√∫ng l√† ${question.CorrectAnswer}: ${optionText}. H√£y ƒë·ªçc k·ªπ c√¢u h·ªèi v√† c√°c l·ª±a ch·ªçn ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ quy t·∫Øc giao th√¥ng.`;
  };

  // Hi·ªÉn th·ªã ExamGenerator n·∫øu ch∆∞a c√≥ ƒë·ªÅ thi
  if (showExamGenerator) {
    return (
      <div className="practice-exam-container">
        <div className="practice-exam-background">
          <DarkVeil
            speed={0.5}
            hueShift={0}
            noiseIntensity={0}
            scanlineIntensity={0}
            scanlineFrequency={0}
            warpAmount={0}
            resolutionScale={1}
          />
        </div>
        
        <div className="main-content">
          <div className="exam-header">
            <div className="exam-header-content">
              <div>
                <TextType
                  text={[
                    'Thi th·ª≠ - T·∫°o ƒë·ªÅ thi t√πy ch·ªânh',
                    'T√πy ch·ªânh c·∫•u h√¨nh ƒë·ªÅ thi theo √Ω mu·ªën'
                  ]}
                  className="exam-title"
                  typingSpeed={75}
                  initialDelay={500}
                  pauseDuration={1000}
                  deletingSpeed={50}
                  loop={true}
                  showCursor={true}
                  cursorCharacter="|"
                />
              </div>
            </div>
          </div>

          <ExamGenerator 
            onExamCreated={handleExamCreated}
            examType="practice"
          />
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="practice-exam-container">
        {/* Background */}
        <div className="practice-exam-background">
          <DarkVeil
            speed={0.5}
            hueShift={0}
            noiseIntensity={0}
            scanlineIntensity={0}
            scanlineFrequency={0}
            warpAmount={0}
            resolutionScale={1}
          />
        </div>
        
        <div className="loading-container">
          <div style={{ textAlign: 'center' }}>
            <div className="loading-spinner"></div>
            <p className="loading-text">ƒêang t·∫£i c√¢u h·ªèi...</p>
          </div>
        </div>
      </div>
    );
  }

  if (showResult) {
    const correctAnswers = questions && questions.length > 0 ? questions.filter(q => answers[q.Id] === q.CorrectAnswer).length : 0;
    const criticalQuestionsFailed = questions && questions.length > 0 ? questions.filter(q => q.IsCritical && answers[q.Id] !== q.CorrectAnswer) : [];
    const isPassed = score >= 80 && criticalQuestionsFailed.length === 0;
    
    return (
      <div className="practice-exam-container">
        {/* Background */}
        <div className="practice-exam-background">
          <DarkVeil
            speed={0.5}
            hueShift={0}
            noiseIntensity={0}
            scanlineIntensity={0}
            scanlineFrequency={0}
            warpAmount={0}
            resolutionScale={1}
          />
        </div>

        <div className="result-container">
          <div className="result-card">
            <div className={`result-icon ${isPassed ? 'passed' : 'failed'}`}>
              {isPassed ? '‚úÖ' : '‚ùå'}
            </div>
            
            <SplitText
              text={isPassed ? 'üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫≠u' : 'üòî R·∫•t ti·∫øc! B·∫°n ch∆∞a ƒë·∫≠u'}
              className="result-title"
              delay={30}
              duration={0.5}
              ease="power3.out"
              splitType="words"
              from={{ opacity: 0, y: 20 }}
              to={{ opacity: 1, y: 0 }}
              threshold={0.1}
              rootMargin="-50px"
              textAlign="center"
            />
            
            <div className="result-score">
              {score}/100 ƒëi·ªÉm
            </div>
            
            <p className="result-description">
              B·∫°n tr·∫£ l·ªùi ƒë√∫ng {correctAnswers}/{questions ? questions.length : 0} c√¢u
            </p>

            {/* Hi·ªÉn th·ªã th√¥ng tin ƒë·ªÅ thi */}
            {examConfig && (
              <div className="exam-info-display">
                <p><strong>üìä Th√¥ng tin ƒë·ªÅ thi:</strong></p>
                <p>‚Ä¢ S·ªë c√¢u h·ªèi: {examConfig.totalQuestions}</p>
                <p>‚Ä¢ C√¢u ƒëi·ªÉm li·ªát: {examConfig.criticalQuestions}</p>
                <p>‚Ä¢ H·∫°ng b·∫±ng: {examConfig.category}</p>
                <p>‚Ä¢ Th·ªùi gian: {Math.floor(examConfig.timeLimit / 60)} ph√∫t</p>
              </div>
            )}
            
            {/* Hi·ªÉn th·ªã th√¥ng tin c√¢u ƒëi·ªÉm li·ªát */}
            {criticalQuestionsFailed.length > 0 && (
              <div className="critical-warning">
                <div className="critical-icon">üö®</div>
                <div className="critical-text">
                  <strong>B√†i thi kh√¥ng ƒë·∫°t do sai c√¢u ƒëi·ªÉm li·ªát!</strong><br/>
                  B·∫°n ƒë√£ sai {criticalQuestionsFailed.length} c√¢u ƒëi·ªÉm li·ªát:
                  <ul>
                    {criticalQuestionsFailed.map((q, index) => (
                      <li key={index}>
                        C√¢u {questions.findIndex(question => question.Id === q.Id) + 1}: {q.QuestionText?.substring(0, 50)}...
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
            
            <div className="result-buttons">
              <button 
                onClick={handleCreateNewExam}
                className="result-button primary"
              >
                üéØ T·∫°o ƒë·ªÅ thi m·ªõi
              </button>
              <button 
                onClick={() => window.location.href = '/'}
                className="result-button secondary"
              >
                V·ªÅ trang ch·ªß
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!questions || questions.length === 0) {
    return (
      <div className="practice-exam-container">
        {/* Background */}
        <div className="practice-exam-background">
          <DarkVeil
            speed={0.5}
            hueShift={0}
            noiseIntensity={0}
            scanlineIntensity={0}
            scanlineFrequency={0}
            warpAmount={0}
            resolutionScale={1}
          />
        </div>
        
        <div className="loading-container">
          <p style={{ color: '#ef4444', fontSize: '18px' }}>Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i!</p>
        </div>
      </div>
    );
  }

  const currentQ = questions && questions.length > 0 ? questions[currentQuestion] : null;
  
  console.log('Current question debug:', {
    currentQuestion,
    currentQId: currentQ?.Id,
    currentQText: currentQ?.QuestionText?.substring(0, 50) + '...',
    answers,
    showExplanation
  });

  return (
    <div className="practice-exam-container">
      {/* Background */}
      <div className="practice-exam-background">
        <DarkVeil
          speed={0.5}
          hueShift={0}
          noiseIntensity={0}
          scanlineIntensity={0}
          scanlineFrequency={0}
          warpAmount={0}
          resolutionScale={1}
        />
      </div>

      {/* Popup x√°c nh·∫≠n v·ªÅ homepage */}
      {showHomePopup && (
        <div className="home-popup-overlay">
          <div className="home-popup">
            <div className="home-popup-content">
              <h3>X√°c nh·∫≠n</h3>
              <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën v·ªÅ trang ch·ªß? T·∫•t c·∫£ ti·∫øn ƒë·ªô l√†m b√†i s·∫Ω b·ªã m·∫•t.</p>
              <div className="home-popup-buttons">
                <button onClick={handleConfirmHome} className="home-popup-btn confirm">
                  C√≥, v·ªÅ trang ch·ªß
                </button>
                <button onClick={handleCancelHome} className="home-popup-btn cancel">
                  Kh√¥ng, ti·∫øp t·ª•c l√†m b√†i
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="main-content">
        {/* Exam Header */}
        <div className="exam-header">
          <div className="exam-header-content">
            <div>
              <TextType
                key={`exam-title-${currentQuestion}`}
                text={[
                  `ƒê·ªÅ thi th·ª≠ - ${questions ? questions.length : 0} c√¢u h·ªèi`,
                  `B·∫°n ƒëang ·ªü c√¢u h·ªèi th·ª© ${currentQuestion + 1}`
                ]}
                className="exam-title"
                typingSpeed={75}
                initialDelay={500}
                pauseDuration={1000}
                deletingSpeed={50}
                loop={true}
                showCursor={true}
                cursorCharacter="|"
              />
            </div>
            <div className="exam-info">
              <span className="question-counter">
                C√¢u {currentQuestion + 1}/{questions ? questions.length : 0}
              </span>
              <div className="timer">
                <span>‚è∞</span>
                <span>{formatTime(timeLeft)}</span>
              </div>
            </div>
          </div>
        </div>

        <div className="exam-grid">
          {/* Question Navigation */}
          <div className="question-nav">
            <h3 className="question-nav-title">
              Danh s√°ch c√¢u h·ªèi
            </h3>

            <div className="question-grid">
              {questions && questions.length > 0 && questions.map((_, index) => {
                const status = index === currentQuestion ? 'current' : getQuestionStatus(index);
                return (
                  <button
                    key={index}
                    onClick={() => setCurrentQuestion(index)}
                    className={`question-button ${status}`}
                  >
                    {index + 1}
                  </button>
                );
              })}
            </div>

            <div className="question-legend">
              <div className="legend-item">
                <div className="legend-color current"></div>
                <span className="legend-text">Hi·ªán t·∫°i</span>
              </div>
              <div className="legend-item">
                <div className="legend-color correct"></div>
                <span className="legend-text">ƒê√∫ng</span>
              </div>
              <div className="legend-item">
                <div className="legend-color incorrect"></div>
                <span className="legend-text">Sai</span>
              </div>
              <div className="legend-item">
                <div className="legend-color unanswered"></div>
                <span className="legend-text">Ch∆∞a l√†m</span>
              </div>
            </div>
          </div>

          {/* Question Content */}
          <div className="question-content">
            <div className="question-header">
              <h3 className="question-title">
                C√¢u {currentQuestion + 1}:
                {/* Icon c√¢u ƒëi·ªÉm li·ªát */}
                {currentQ && currentQ.IsCritical && (
                  <span className="critical-question-icon" title="C√¢u ƒëi·ªÉm li·ªát - N·∫øu sai s·∫Ω kh√¥ng ƒë·∫°t b√†i thi">
                    üö®
                  </span>
                )}
              </h3>
               
              <p className="question-text">
                {currentQ ? currentQ.QuestionText : 'ƒêang t·∫£i c√¢u h·ªèi...'}
              </p>

              <div className="answer-options">
                {currentQ && ['A', 'B', 'C', 'D'].map(option => {
                  const optionText = currentQ[`Option${option}`];
                  if (!optionText) return null;
                   
                  const isSelected = answers[currentQ.Id] === option;
                  const isCorrect = option === currentQ.CorrectAnswer;
                  const isIncorrect = isSelected && option !== currentQ.CorrectAnswer;
                   
                  let optionClasses = 'answer-option';
                  if (isSelected) {
                    optionClasses += isCorrect ? ' selected correct' : ' selected incorrect';
                  } else if (isCorrect && answers[currentQ.Id]) {
                    optionClasses += ' correct-answer';
                  }
                   
                  return (
                    <label 
                      key={option}
                      className={optionClasses}
                    >
                      <input
                        type="checkbox"
                        name={`question-${currentQ.Id}`}
                        value={option}
                        checked={isSelected}
                        onChange={() => handleAnswerSelect(currentQ.Id, option)}
                        className="answer-radio"
                      />
                      <div className="answer-text">
                        <span className="answer-label">{option}.</span>
                        <span className="answer-content">{optionText}</span>
                        {isCorrect && answers[currentQ.Id] && (
                          <span className="answer-status correct">
                            ‚úÖ ƒê√∫ng
                          </span>
                        )}
                        {isIncorrect && (
                          <span className="answer-status incorrect">
                            ‚ùå Sai
                          </span>
                        )}
                      </div>
                    </label>
                  );
                })}
              </div>

              {/* Hi·ªÉn th·ªã gi·∫£i th√≠ch khi ch·ªçn sai */}
              {currentQ && showExplanation[currentQ.Id] && (
                <div className="explanation">
                  <div className="explanation-header">
                    <span>‚ùå</span>
                    <span>ƒê√°p √°n c·ªßa b·∫°n sai r·ªìi!</span>
                  </div>
                   
                  <div className="explanation-section">
                    <div className="explanation-title correct">
                      ƒê√°p √°n ƒë√∫ng:
                    </div>
                    <div className="explanation-content correct">
                      {currentQ.CorrectAnswer}. {currentQ[`Option${currentQ.CorrectAnswer}`]}
                    </div>
                  </div>
                   
                  <div className="explanation-section">
                    <div className="explanation-title explanation">
                      Gi·∫£i th√≠ch:
                    </div>
                    <div className="explanation-content explanation">
                      {getExplanation(currentQ)}
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Navigation Buttons */}
            <div className="navigation-buttons">
              <button
                onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}
                disabled={currentQuestion === 0}
                className="nav-button"
              >
                ‚Üê Tr∆∞·ªõc
              </button>

              <div className="nav-button-group">
                <button
                  onClick={() => setCurrentQuestion(Math.min((questions ? questions.length : 0) - 1, currentQuestion + 1))}
                  disabled={currentQuestion === (questions ? questions.length : 0) - 1}
                  className="nav-button next"
                >
                  Sau ‚Üí
                </button>

                <button
                  onClick={handleSubmit}
                  disabled={isSubmitted}
                  className="nav-button submit"
                >
                  N·ªôp b√†i
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PracticeExam;
